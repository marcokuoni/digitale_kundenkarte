scalar Date

type Stamp {
  creationDate: Date!
  validUntilDate: Date
}

type Card {
  creationDate: Date!
  honouredAt: Date
  stamps: [Stamp]!
}

type User {
  _id: ID!
  transfercode: String!
  name: String
  email: String
  emailValidatedAt: Date
  newsletter: Boolean
  cards: [Card]!
  userRoles: [String]!
  passwordChangedAt: Date
  createdAt: Date!
  updatedAt: Date!
}

type RefreshToken {
  _id: ID!
  user: User!
  expires: Date!
  created: Date!
  createdByIp: String!
  createdByUserAgent: String!
  createdAt: Date!
  updatedAt: Date!
}

type IpBlock {
  _id: ID!
  ip: String!
  blockedUntil: Date
  createdAt: Date!
  updatedAt: Date!

}

type UrlToken {
  token: String!
  validUntil: Date!
  blockForMinutes: Int!
}


type Query {
  getUsersWithPassword: [User]!
  getCurrentUser: User!
  getActiveRefreshTokens: [RefreshToken]!
  getIpBlocks: [IpBlock]!
}

type Mutation {
  updateUser(
    _id: ID!
    name: String
    email: String
    newsletter: Boolean!
    password: String
  ): User!
  updateUserRoles(
    _id: ID!
    userRoles: [String]!
  ): User!
  signIn(transfercode: String!, password: String, successRedirect: String!): Boolean!
  passwordReset(email: String!): Boolean!
  resendTransfercode(email: String!): Boolean!
  resetPassword(token: String!, password: String!): Boolean!
  signUp(
    name: String
    email: String
    newsletter: Boolean!
    password: String
    successRedirect: String!
  ): Boolean!
  refresh: Boolean!
  signOut: Boolean!
  revokeRefreshToken(_id: ID!): Boolean!
  deleteIpBlock(_id: ID!): Boolean!
  addIpBlock(ip: String!, blockedUntil: Date): Boolean!
  generateUrlToken(validUntil: Date!, blockForMinutes: Int!): UrlToken!
  addStamp(urlToken:String!): User! 
  honourCardFrom(transfercode:String!): Boolean!
  sendValidationMail: Boolean!
  validateEmail(token: String!): Boolean!
}
